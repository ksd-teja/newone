SELECT(DRL): USED TO RETRV. DATA FROM DB TABLES
```````````
SYN: SELECT [DISTINCT] */column_list
     FROM tablename
     [WHERE condition(s)];

TABLE: DEPT
 DEPTNO DNAME          LOC
------- -------------- -------------
     10 ACCOUNTING     NEW YORK
     20 RESEARCH       DALLAS
     30 SALES          CHICAGO
     40 OPERATIONS     BOSTON

TABLE: EMP
EMPNO ENAME      JOB              MGR HIREDATE         SAL       COMM     DEPTNO
----- ---------- --------- ---------- --------- ---------- ---------- ----------
 7369 SMITH      CLERK           7902 17-DEC-80        800                    20
 7499 ALLEN      SALESMAN        7698 20-FEB-81       1600        300         30
 7521 WARD       SALESMAN        7698 22-FEB-81       1250        500         30
 7566 JONES      MANAGER         7839 02-APR-81       2975                    20
 7654 MARTIN     SALESMAN        7698 28-SEP-81       1250       1400         30
 7698 BLAKE      MANAGER         7839 01-MAY-81       2850                    30
 7782 CLARK      MANAGER         7839 09-JUN-81       2450                    10
 7788 SCOTT      ANALYST         7566 19-APR-87       3000                    20
 7839 KING       PRESIDENT            17-NOV-81       5000                    10
 7844 TURNER     SALESMAN        7698 08-SEP-81       1500          0         30
 7876 ADAMS      CLERK           7788 23-MAY-87       1100                    20
 7900 JAMES      CLERK           7698 03-DEC-81        950                    30
 7902 FORD       ANALYST         7566 03-DEC-81       3000                    20
 7934 MILLER     CLERK           7782 23-JAN-82       1300                    10

EXAMPLES:

SELECT *
FROM DEPT;

SELECT * 
FROM EMP;

SELECT ENAME
FROM EMP;

SELECT ENAME,JOB,SAL
FROM EMP;

ARITHMETIC OPERATIONS IN SELECT STATEMENT:
```````````````````````````````````````````
+, -, *, /, ()

SELECT ENAME, SAL+500
FROM EMP;

SELECT ENAME,JOB,SAL,SAL*34/100
FROM EMP;

SELECT ENAME,JOB,SAL,SAL*0.34, SAL*1.34
FROM EMP;

SELECT ENAME,JOB,SAL,COMM,SAL+COMM FROM EMP;


ALIAS NAMES TO COLUMNS:
```````````````````````
SELECT ENAME,JOB,SAL,SAL*0.34 AS BONUS, SAL*1.34 AS TOTAL
FROM EMP;

SELECT ENAME AS NAME,JOB AS DESIG,SAL AS BASIC,SAL*0.34 AS BONUS, SAL*1.34 AS NETSAL
FROM EMP;
(OR)
SELECT ENAME NAME,JOB DESIG,SAL BASIC,SAL*0.34 BONUS, SAL*1.34 NETSAL
FROM EMP;


CONCATINATION OPERATOR(||):

SELECT 'MR.'||ENAME
FROM EMP;

SELECT ENAME||' IS WORKING AS '||JOB
FROM EMP;
	--> SMITH IS WORKING AS CLERK

==========================**DAY 2**===================================================

desTo set line and pagesizes:
set linesize 150
set pagesize 100

To view default settings:
show linesize
show pagesize
show user
clear screen (or) cl scr
-------------------------------------------------------------------------------------------------
Select Statement cont.:
````````````````````````

WHERE clause: to filter the rows to be retrv.
	relational operators: >, <, >=, <=, =, !=(OR)<>
	logical operators: AND, OR, NOT

SELECT *
FROM EMP
WHERE ENAME='SMITH';

SELECT *
FROM EMP
WHERE SAL>=1500;

SELECT *
FROM EMP
WHERE SAL>=1500 AND SAL<=3000;

SELECT *
FROM EMP
WHERE JOB='CLERK';

SELECT *
FROM EMP
WHERE JOB='ANALYST' AND JOB='CLERK';

SELECT *
FROM EMP
WHERE JOB='CLERK' AND SAL>1000;

SELECT *
FROM EMP
WHERE (JOB='CLERK' OR JOB='SALESMAN') AND SAL>1000;

STUDENTS: SNO, SNAME, S1, S2, S3

	SELECT *
  	FROM STUDENTS
	WHERE S1>=50 AND S2>=50 AND S3>=50;

	SELECT *
  	FROM STUDENTS
	WHERE S1<50 OR S2<50 OR S3<50;

	SELECT *
	FROM STUDENTS
	WHERE (S1>=50 AND S2>=50 AND S3<50)
	OR    (S1>=50 AND S2<50 AND S3>=50)
	OR    (S1<50 AND S2>=50 AND S3>=50);

BETWEEN operator: TO SEARCH FOR A VALUE IN GIVEN RANGE
`````````````````
SELECT *
FROM EMP
WHERE SAL>=1500 AND SAL<=3000;
      `````````     ``````````
SELECT *
FROM EMP
WHERE SAL BETWEEN 1500 AND 3000;
       ````````````````````````

SELECT *
FROM EMP
WHERE HIREDATE BETWEEN '1-JAN-82' AND '31-DEC-82';

SELECT *
FROM EMP
WHERE SAL NOT BETWEEN 1500 AND 3000;

IN operator: USED TO SEARCH FOR A VALUE IN A GIVEN LIST
`````````````
SELECT *
FROM EMP
WHERE JOB='MANAGER' OR JOB='ANALYST' OR JOB='PRESIDENT';

SELECT * 
FROM EMP
WHERE JOB IN ('MANAGER','ANALYST','PRESIDENT');

SELECT *
FROM EMP
WHERE DEPTNO IN (10,20);

SELECT *
FROM EMP
WHERE DEPTNO NOT IN (10,20);

LIKE operator: USED TO SEARCH FOR PATTERN OF TEXT
``````````````
	_(UNDERSCORE): SINGLE CHAR
	%(PERCENTAGE): ZERO OR MORE CHARS

	SELECT *
	FROM EMP
	WHERE ENAME LIKE 'S%';

	SELECT *
	FROM EMP
	WHERE ENAME LIKE '_L%';

	SELECT *
	FROM EMP
	WHERE ENAME LIKE '____';

	SELECT *
	FROM EMP
	WHERE ENAME NOT LIKE '____';

IS operator: USED TO SEARCH FOR NULL'S
````````````
SELECT * 
FROM EMP 
WHERE COMM IS NULL;

SELECT * 
FROM EMP 
WHERE COMM IS NOT NULL;

------------------------------------------------------------------------------------------------------
DISTINCT clause:TO ELMINATE DUPLICATE ROWS
````````````````
SELECT DISTINCT JOB
FROM EMP;

SELECT DISTINCT DEPTNO, JOB
FROM EMP;

SELECT DISTINCT *
FROM EMP;

-----------------------------------------------------------------------------------------------------
ORDER BY clause: TO DISPLAY ROWS IN SORTED ORDER BASED ON SPECIFIED COLUMNS
````````````````
SYN: SELECT [DISTINCT] */column_list
     FROM tablename
     [WHERE condition(s)]
     [ORDER BY column(s) [ASC/DESC]];

SELECT *
FROM EMP
ORDER BY SAL;

SELECT *
FROM EMP
ORDER BY SAL DESC;

SELECT *
FROM EMP
ORDER BY JOB,SAL;

SELECT *
FROM EMP
ORDER BY JOB,SAL DESC;

SELECT *
FROM EMP
ORDER BY JOB DESC,SAL DESC;

ORDER ROWS BASED ON ALIAS NAME:
```````````````````````````````
SELECT ENAME,JOB,SAL,SAL*.25 BONUS
FROM EMP
ORDER BY BONUS;

ORDER ROWS BASED ON COLUMN POSSITION:
````````````````````````````````````````
SELECT *
FROM EMP
ORDER BY 1;


SELECT *
FROM EMP
WHERE JOB='CLERK'
ORDER BY SAL;
======================================================================================================
DML: Data Manipulation Language [INSERT, UPDATE, DELETE]

INSERT: USED TO ADD NEW ROWS IN A TABLE
	SYN: INSERT INTO table_name[(column_list)]
             VALUES(val1,val2,val3,...)

	INSERT INTO DEPT 
	VALUES(50,'MARKETING','NEWJERSY');

	INSERT INTO EMP
	VALUES(9001,'KUMAR','MANAGER',7839,'26-NOV-19',4000,NULL,50);

	INSERT INTO EMP
	VALUES(9002,'JOHN',NULL,NULL,'26-NOV-19',NULL,NULL,50);

	INSERT INTO EMP(EMPNO,ENAME,HIREDATE,DEPTNO)
	VALUES(9002,'JOHN','26-NOV-19',50);


UPDATE: TO MODIFY EXISTING ROWS
	SYN: UPDATE table_name
             SET column=VALUE
	     [WHERE condition(s)];	

	UPDATE EMP 
	SET SAL=SAL+100;

	UPDATE EMP
	SET MGR=9001,JOB='CLERK',SAL=2000
	WHERE EMPNO=9002;

DELETE: TO REMOVE ROWS IN A TABLE

	SYN: DELETE FROM table_name
             [WHERE condition(s);

	EX: DELETE FROM EMP;
	    SELECT * FROM EMP;
	    ROLLBACK; --> TO UNDO DML
	    SELECT * FROM EMP;

            DELETE FROM EMP
	    WHERE EMPNO=7902;

-----------------------------------------------------------------------------------------------------
DDL (DATA DEFINITION LANGUAGE): [CREATE, ALTER, DROP, TRUNCATE, RENAME]
````````````````````````````````

CREATE TABLE: TO DEFINE NEW TABLES
````````````
	SYN: CREATE TABLE table_name
	    (column1 datatype,
	     column2 datatype,
	     .....
	    );

	data types:
	NUMBER(Precisson[,Scale]): USED TO STORE NUMARIC VALUES
		NUMBER(5) --> 99999
	        NUMBER(5,2) --> 999.99
	CHAR(size): TO STORE CHAR DATA. SPACE OCCUPIED BY DATA IS BASED ON COLUMN LENGTH
		CHAR(10)-->'JOHN'-->10BYTES
	VARCHAR2(size): TO STORE CHAR DATA. SPACE OCCUPIED BY DATA IS BASED ON VALUE LENGTH
		VARCHAR2(10)-->'JOHN'-->4 BYTES
	DATE: USED TO STORE DATE VALUES IN 'DD-MON-RR' FORMAT

CREATE TABLE CTSBATCH7
(SID NUMBER(4),
 SNAME VARCHAR2(20),
 QUAL VARCHAR2(20),
 YOP NUMBER(4),
 DOB DATE,
 GENDER CHAR(1),
 FEE NUMBER(8,2));

INSERT INTO CTSBATCH7 VALUES(1001,'NIKHIL','BTECH',2019,'22-MAY-97','M',19000);

ALTER TABLE:
	1. TO ADD NEW COLUMN
	2. TO MODIFY EXISTING COLUMN
	3. DROP(REMOVE) A COLUMN
	4. RENAME A COLUMN

ADD COLUMN:
	SYN: ALTER TABLE table_name ADD column_name datatype;
	EX:  ALTER TABLE CTSBATCH7 ADD EMAIL VARCHAR2(50);
             UDPATE CTSBATCH7 SET EMAIL='XYZ@GOOGLE.COM' WHERE SID=1001;

MODIFY COLUMN:
	SYN: ALTER TABLE table_name MODIFY column_name datatype;
	EX: ALTER TABLE CTSBATCH7 MODIFY QUAL VARCHAR2(6);

DROP A COLUMN:
	SYN:ALTER TABLE table_name DROP COLUMN column_name;
	EX: ALTER TABLE CTSBATCH7 DROP COLUMN GENDER;

RENAME COLUMN:
	SYN: ALTER TABLE table_name RENAME COLUMN column_name TO new_col_name;
	ex: ALTER TABLE CTSBATCH7 RENAME COLUMN QUAL TO QUALIFICATION;

DROP TABLE: TO REMOVE TABLE FROM DB
	SYN: DROP TABLE table_name;
	EX: DROP TABLE CTSBATCH7;

FLASHBACK(10g): TO RECOVER A DROPPED TABLE
	SYN: FLASHBACK TABLE table_name TO BEFORE DROP;
	EX: FLASHBACK TABLE CTSBATCH7 TO BEFORE DROP;


SHOW RECYCLEBIN: TO VIEW DROPPED TABLES
	SQL> SHOW RECYCLEBIN

TO REMOVE TABLE PERMANENTLY:
	EX: DROP TABLE XYZ PURGE;

TRUNCATE TABLE: USED TO REMOVE ALL ROWS IN A TABLE
	SYN: TRUNCATE TABLE table_name;
	EX:  TRUNCATE TABLE EMP;

RENAME: USED TO RENAME A TABLE
	SYN: RENAME table_name TO new_tab_name;
	EX: RENAME CTSBATCH7 TO STUDENTS;
====================================================================================================
tasks:
1. KNOW THE RULES TO GIVE A TABLENAME
2. KNOW THE DIFFERENCE BETWEEN CHAR AND VARCHAR2
3. KNOW ABOUT NCHAR, NVARCHAR2 DATA TYPES
4. DIFFERENCE BETWEEN DELETE, TRUNCATE AND DROP
--------------------------------------------------------------------------------------------------




========================================================================  **DAY 3** ===================================================================================


TCL: TRANSACTION CONTROL LANGUAGE

* COMMIT: TO SAVE TRANSACTIOS(dml) 
		SQL> COMMIT;
* ROLLBACK: TO UNDO TRANSACTIONS(dml)
		SQL> ROLLBACK;
* SAVEPOINT: ITS A BOOKMARK BETWEEN TRANSACTIONS, SO THAT WE CAN ROLLBACK UPTO SPECIFIC TRANSACTIONS.

	EX: UPDATE EMP SET ENAME='MADHU' WHERE ENAME='SCOTT';
            DELETE FROM EMP WHERE DEPTNO=30;
	    SAVEPOINT SP1;
	    INSERT INTO EMP VALUES(......);
	    ROLLBACK TO SP1;

NOTE: WHEN USER PERFORMS ANY DDL COMMAND, PREVIOUS TRANSACTIONS ARE AUTO COMMITTED.
----------------------------------------------------------------------------------------------------
WHAT ARE CONSTRAINTS?
	* NOT  NULL
	* UNIQUE
	* PRIMARY KEY
	* CHECK
	* FOREIGN KEY
-----------------------------------------------------------------------------------------------------
FUNCTIONS:
	1. SINGLE ROW FUNCTIONS: EXCEUTES FOR EACH ROW INDIVIDUALLY
	2. MULTI ROW FUNCTIONS: EXECUTES ONLY ONCE BY TAKING ALL ROWS AS INPUT

SINGLE ROW FUNCTIONS:
````````````````````
	1. CHAR FUNCTIONS
	2. NUMBER FUNCTIONS
	3. DATE FUNCTIONS
	4. CONVERSION FUNCTIONS
	5. GENERAL FUNCTIONS

CHAR FUNCTIONS:

LEGNTH(): TO KNOW LENGTH OF GIVEN TEXT

	SELECT ENAME,LENGTH(ENAME) FROM EMP;
	SELECT * FROM EMP WHERE LENGTH(ENAME)=4;
	SELECT LENGTH('MADHU') FROM DUAL;

CONCAT(): TO CONCATINATE TWO STRINGS
	SELECT CONCAT('MADHU','SUDHAN') FROM DUAL;
	SELECT CONCAT(ENAME,JOB) FROM EMP;
	SELECT CONCAT(CONCAT(ENAME,JOB),SAL) FROM EMP;

UPPER(): TO CONVERT GIVEN TEXT TO UPPER CASE
LOWER(): TO CONVERT GIVEN TEXT TO LOWER CASE
INITCAP() : TO CONVERT GIVEN TEXT TO TITLECASE
	SELECT LOWER(ENAME), INITCAP(ENAME) FROM EMP;
	SELECT INITCAP('madhu SUDHAN Reddy') from dual; --> Madhu Sudhan Reddy
	select * from emp where lower(ename)='smith';

SUBSTR(): [SUB STRING] TO GET A PART OF A STRING BASED ON GIVEN POSSITION AND LENGTH
	SYN: SUBSTR('TEXT',POSS[,LEGNTH])

	SELECT SUBSTR('BALAGANESH',5,4) FROM DUAL; --> GANE
	SELECT SUBSTR('BALAGANESH',5) FROM DUAL; --> GANESH

INSTR(): RETURNS POSSITION OF SPECIFIED TEXT IN A GIVEN STRING.

	SELECT INSTR('BALAGANESH','GANE') FROM DUAL; --> 5
	SELECT ENAME FROM EMP WHERE INSTR(ENAME,'_')!=0;

select lower(ename||'.'||substr(ename,1,1))||'@savantis.com'
from emp;

ALTER TABLE EMP ADD EMAIL VARCHAR2(30);
UPDATE EMP SET EMAIL=lower(ename||'.'||substr(ename,1,1))||'@savantis.com';

TRIM(): TO REMOVE TRAILING BLANK SPACES IN A STRING
	SELECT TRIM('    MADHU    ') FROM DUAL;
	SELECT LENGTH('    MADHU    ') FROM DUAL;
	SELECT LENGTH(TRIM('    MADHU    ')) FROM DUAL;

LTRIM():
RTRIM():

RPAD(): USED TP PADD SPACES/CHARS TO A GIVEN STRING AT RIGHT SIDE
	SELECT RPAD(ENAME,10) FROM EMP;
	SELECT RPAD(ENAME,10,'*') FROM EMP;

LPAD(): USED TP PADD SPACES/CHARS TO A GIVEN STRING AT LEFT SIDE
	SELECT RPAD(ENAME,10) FROM EMP;

RELPACE(): TO REPLACE A TEXT WITH AOTHER TEXT IN A GIVEN STRING
	SELECT REPLACE('MADHU SUDHAN','SUDHAN','RAJU')FROM DUAL;
-----------------------------------------------------------------------------------------------------
NUMBER FUNCTIONS:
`````````````````
ABS(): RETURNS ABSOLUTE NUMBER BASED ON GIVEN NUMBER
	SELECT ABS(-100) FROM DUAL;

CEIL(): RETURNS NEAREST LARGEST INTEGER FOR A GIVEN NUMBER
		SELECT CEIL(12.45) FROM DUAL; --> 13
		
FLOOR(): RETURNS NEAREST SMALLEST INTEGER FOR A GIVEN NUMBER
	SELECT FLOOR(12.65) FROM DUAL; --> 12

MOD(): TO GET REMINDER OF A GIVEN DIVISION
	SELECT MOD(10,3) FROM DUAL; --> 1

POWER(X,Y): RETURNS X^Y
	SELECT POWER(2,10) FROM DUAL; -->1024

SQRT(): RETURNS SQUARE ROOT OF GIVEN NUMBER
	SELECT SQRT(9)FROM DUAL; --> 3

ROUND(): ROUNDUP A GIVEN NUMBER TO SPECIFIED DECIMALS
	SYN: ROUND(NUMBER[,DECIMAL_COUNT])
	SELECT ROUND(19.248756,2)FROM DUAL; --> 19.25
	SELECT ROUND(19.243756,2)FROM DUAL; --> 19.24
	SELECT ROUND(140.8542) FROM DUAL; --> 141

TRUNC(): TRUNCATINATES A GIVEN NUMBER TO SPECIFIED DECIMALS
	SYN: TRUNC(NUMBER[,DECIMAL_COUNT])
	
	SELECT TRUNC(19.248756,2)FROM DUAL; --> 19.24
	SELECT TRUNC(19.243756,2)FROM DUAL; --> 19.24
	SELECT TRUNC(140.8542) FROM DUAL; --> 140
----------------------------------------------------------------------------------------------------
DATE FUNCTIONS:
```````````````

SYSDATE: ITS A PSEUDO COLUMN THAT RETURNS CURRUNT SYSTEM DATE
	SELECT SYSDATE FROM DUAL;
	SELECT SYSDATE+10 FROM DUAL;
	SELECT SYSDATE-10 FROM DUAL;

	SELECT ENAME, JOB, SAL, SYSDATE-HIREDATE
	FROM EMP;

	SELECT ENAME, JOB, SAL, (SYSDATE-HIREDATE)/365
	FROM EMP;

ADD_MONTHS(): ADD SPECIFIED NO. OF MONTHS TO A GIVEN DATE
	SELECT ADD_MONTHS(SYSDATE,5) FROM DUAL;
	SELECT ADD_MONTHS('12-FEB-18',5) FROM DUAL;
	SELECT ADD_MONTHS('12-FEB-18',-5) FROM DUAL;

MONTHS_BETWEEN(): TO KNOW DIFFERENCE BETWEEN TWO DATE VALUES IN MONTHS

	SELECT MONTHS_BETWEEN(SYSDATE,'29-SEP-77') FROM DUAL;
	SELECT ENAME,MONTHS_BETWEEN(SYSDATE,HIREDATE)/12 FROM EMP;

LAST_DAY(): RETURNS LAST DAY_OF_MONTH OF A GIVEN DATE
	SELECT LAST_DAY(SYSDATE) FROM DUAL;

-----------------------------------------------------------------------------------------------------

CONVERISON FUNCTIONS:
1. TO_CHAR
2. TO_NUMBER
3. TO_DATE


TO_CHAR:
	1. TO CONVERT NUMBER TO CHAR
	2. TO CONVERT DATE TO CHAR

NUMBER TO CHAR:
	SYN: TO_CHAR(NUMBER, 'FORMAT')

	FORMATS:
	9 - SINGLE DIGIT
	. - DECIMAL STYLE
	, - COMMA STYLE
	$ - CURRUNCY STYLE
	L - LOCAL CURRUNCY STYLE

	SELECT TO_CHAR(4872.12, '$9,999.99') FROM DUAL;
	SELECT ENAME,JOB, TO_CHAR(SAL, '$9,999.99') FROM EMP;


DATE TO CHAR:
	SYN: TO_CHAR(DATE,'FORMAT')

	FORMATS:
	DD - DAY
	MM - MONTH IN DIGITS
	MON -- ABBR. MONTH
	MONTH - SPELLED MONTH
	YY/RR - 2 DIGIT YEAR
	YYYY/RRRR - 4 DIGIT YEAR
	HH - HOURS
	MI - MINUTES
	SS - SECONDS
	AM/PM -- AM/PM
	D/DY/DAY -- WEEK DAY

	SELECT TO_cHAR(SYSDATE, 'DD/MM/RRRR') FROM DUAL;
	SELECT TO_cHAR(SYSDATE, 'DD') FROM DUAL;
	SELECT TO_cHAR(SYSDATE, 'DD MONTH') FROM DUAL;
	SELECT TO_cHAR(SYSDATE, 'DAY') FROM DUAL;

TO_NUMBER: TO CONVERT CHAR TO NUMBER

	SELECT TO_NUMBER('$2,345.14','$9,999.99') FROM DUAL;

TO_DATE(): TO CONVERT CHAR TO DATE

	SELECT TO_DATE('12/25/77','MM/DD/RR') FROM DUAL;
---------------------------------------------------------------------------------------------------
GENERAL FUNCTIONS:
``````````````````
NVL(): TO CONVERT NULL TO A SPECIFIED VALUE
	SELECT ENAME,SAL,NVL(COMM,999) FROM EMP;
	SELECT ENAME,SAL,COMM, SAL+NVL(COMM,0) FROM EMP;

NVL2(COLUMN,EXPR1,EXPR2):
	IF COLUMN IS 'NOT NULL', IT RETURNS 'EXPR1'
	IF COLUMN IS 'NULL', IT RETURNS 'EXPR2'

	SELECT ENAME, NVL2(COMM,'YES','NO') FROM EMP;

	SELECT ENAME, SAL, COMM, NVL2(COMM, SAL+COMM, SAL)
	FROM EMP;


CASE: USED TO REPLACE A VALUE WITH ANOTHER VALUE
SYN: CASE column WHEN val1 THEN rval1
                 WHEN val2 THEN rval2
		 WHEN val3 THEN rval3
		 ELSE ravl
     END

SELECT ENAME,JOB,SAL,
CASE DEPTNO WHEN 10 THEN 'ACCOUNTING' 
WHEN 20 THEN 'RESEARCH' 
ZWHEN 30 THEN 'SALES' 
ELSE 'OPERATIONS' 
END DEPT
FROM EMP;

DECODE(): SAME AS CASE CONSTRUCT, USED TO REPLACE A VALUE WITH ANOTHER

SELECT ENAME,JOB,SAL,
DECODE(DEPTNO,10,'ACCOUNTING',20,'RESEARCH',30,'SALES','OPERATIONS')
FROM EMP;

-------------------------------------------------------------------------------------------------
MULTI ROW FUNCTIONS (GROUP FUNCTIONS):
```````````````````````````````````````
SUM(): TO KNOW SUM OF ALL VALUES IN A COLUMN
	SELECT SUM(SAL) FROM EMP;
AVG(): TO KNOW AVERGAE OF ALL VALUES IN A COLUMN
	SELECT AVG(SAL) FROM EMP;
COUNT(): 1. TO COUNT NO. OF ROWS IN A TBALE
		SELECT COUNT(*) FROM EMP;
	 2. TO COUNT NOT NULL VALUES
		SELECT COUNT(COMM) FROM EMP;
MIN():
MAX():
	SELECT MAX(SAL) FROM EMP WHERE DEPTNO=10;
	SELECT COUNT(*) FROM EMP WHERE JOB='MANAGER';

NOTE:
	1. OTHER COLUMNS ARE NOT ALLOWED WHILE WORKING WITH GROUP FUNCTIONS
		SELECT ENAME,MAX(SAL) FROM EMP; --> ERROR

	2. GROUP FUNCTIONS SHOULD NOT BE USED IN 'WHERE' CLAUSE
		SELECT ENAME FROM EMP WHERE SAL=MAX(SAL); --> ERROR


====================================***DAY4***==================================================

Group By clause:
````````````````
SYN:  SELECT GROUP COLUMNS/GROUP_FUNCTIONS
      FROM TABLENAME
      [WHERE condition(s)]
      GROUP BY column(s)
      [HAVING condition(s)]


SELECT SUM(SAL)
FROM EMP
GROUP BY DEPTNO;

SELECT DEPTNO,SUM(SAL)
FROM EMP
GROUP BY DEPTNO;

SELECT DEPTNO,JOB,COUNT(*)
FROM EMP
GROUP BY DEPTNO,JOB;

SELECT DEPTNO,JOB,COUNT(*)
FROM EMP
GROUP BY DEPTNO,JOB
ORDER BY DEPTNO,JOB;

SELECT DEPTNO,COUNT(*)
FROM EMP
WHERE JOB!='MANAGER'
GROUP BY DEPTNO;


SELECT DEPTNO,COUNT(*)
FROM EMP
GROUP BY DEPTNO
HAVING COUNT(*)>3;   -- 'HAVING' clausE IS USED TO APPLY CONDITIONS ON GROUP FUNCTIONS/GROUP COLUMNS
----------------------------------------------------------------------------------------------------
SUB QUERIES:
````````````
SELECT ENAME 
FROM EMP 
WHERE SAL=
	  (SELECT MAX(SAL) 
	   FROM EMP);

SELECT ENAME
FROM EMP
WHERE EMPNO = 
	     (SELECT MGR
	      FROM EMP
	      WHERE ENAME='SMITH');

SELECT *
FROM EMP
WHERE HIREDATE > 
		(SELECT HIREDATE
		 FROM EMP
		 WHERE ENAME='SCOTT');

SELECT DNAME
FROM DEPT
WHERE DEPTNO = 
		(SELECT DEPTNO
		 FROM EMP
		 WHERE ENAME='ALLEN');

SELECT *
FROM EMP
WHERE MGR = 
	(SELECT EMPNO
	FROM EMP
	WHERE ENAME='KING');

----------------------------------------------------------------------------------------------------
TYPES OF SUBQUERIES:
````````````````````
1. SINGLE ROW SUQUERIES - IF A SUBQUERY RETURNS ONLY SINGLE ROW, ITS CALLED SINGLE ROW SUBQERY
		RELATIONAL OPERATORS USED IN srs: =, !=, >, <, >=, <=

2. MULTI ROW SUBQUERIES - IF A SUBQUERY RETURN MORE THAN ONE ROW, IT IS CALLED AS MRS
		RELATIONAL OPERATORS: 
			IN
			ALL [>ALL, <ALL, >=ALL, <=ALL]
			ANY [>ANY, <ANY, >=ANY, <=ANY]

	EX1: GET ALL MANAGERS
	SELECT * 
	FROM EMP 
	WHERE EMPNO IN 
			(SELECT DISTINCT MGR 
			 FROM EMP);
	
	EX2: GET ALL EMPLOYEES WHO EARN MORE THAN THAT OF EMPLOYEES DEPTNO 30
	SELECT *
	FROM EMP
	WHERE SAL >ALL 
		(SELECT SAL
		FROM EMP
		WHERE DEPTNO=30);

    	EX3: GET ALL EMPLOYEES WHO EARN MORE THAN THAT OF ANY ONE EMPLOYEE DEPTNO 30
	SELECT *
	FROM EMP
	WHERE SAL >ANY 
		(SELECT SAL
		FROM EMP
		WHERE DEPTNO=30);


3. MULTI COLUMN SUBQUERIES - I A SUBQUERY RETURNS MORE THAN ONE COLUMN, ITS A MULTI COLUMN SUBQUERY

SELECT *
FROM EMP
WHERE SAL = 
	(SELECT SAL
	FROM EMP
	WHERE ENAME='ALLEN')
AND   JOB = 
	(SELECT JOB
	FROM EMP
	WHERE ENAME='ALLEN');

cONVERTING ABOVE QUERY TO MULTI COLUMN:

SELECT *
FROM EMP
WHERE (JOB,SAL) = 
	(SELECT JOB,SAL
	FROM EMP
	WHERE ENAME='ALLEN')
====================================================================================================
JOINS: joins are used to combine two or more tables and trev. data
``````
syn: SELECT column_list
     FROM table1, table2
     WHERE join_condition;

EX:  SELECT *
     FROM EMP,DEPT
     WHERE EMP.DEPTNO=DEPT.DEPTNO;

     SELECT ENAME,JOB,SAL,DNAME,LOC
     FROM EMP,DEPT
     WHERE EMP.DEPTNO=DEPT.DEPTNO;

     SELECT ENAME,JOB,SAL,EMP.DEPTNO,DNAME,LOC
     FROM EMP,DEPT
     WHERE EMP.DEPTNO=DEPT.DEPTNO;

     SELECT EMP.ENAME,EMP.JOB,EMP.SAL,EMP.DEPTNO,DEPT.DNAME,DEPT.LOC
     FROM EMP,DEPT
     WHERE EMP.DEPTNO=DEPT.DEPTNO;

     SELECT E.ENAME,E.JOB,E.SAL,E.DEPTNO,D.DNAME,D.LOC
     FROM EMP E,DEPT D
     WHERE E.DEPTNO=D.DEPTNO;


    SELECT *
    FROM PATIENT_DATA PD, DOC_MASTER DM, TEST_MASTER TM, TEST_DATA TD
    WHERE PD.DOC_ID = DM.DOC_ID
    AND  PD.REGNO=TD.REGNO
    AND TD.TEST_ID=TM.TEST_ID
    AND PD.NAME='KUMAR';

    CARTESIAN PRODUCT: IF TWO TABLES ARE JOINED WITH OUT JOIN CONDITION THE RESULT IS CALLED CP.
	SELECT *
	FROM EMP, DEPT;
-----------------------------------------------------------------------------------------------------
TYPES OF JOINS:
```````````````
1. EQUI JOIN
2. NON EQUI JOIN
3. SELF JOIN
4. OUTER JOINS
	A. LEFT OUTER JOIN
	B. RIGHT OUTER JOIN

EQUI JOIN: IF TWO TABLES ARE JOINED WITH AN EQUALTO JOIN CONDITION ITS CALLED EQUI JOIN.
	SELECT D.DNAME,SUM(E.SAL)
	FROM EMP E, DEPT D
	WHERE E.DEPTNO=D.DEPTNO
	GROUP BY  D.DNAME;

NON EQUI JOIN: IF WE JOIN TWO TABLES WITH A CONDITION OTHER THAN 'EQUAL TO', THEN ITS CALLED NEJ
	SELECT E.ENAME,E.JOB,E.SAL,S.GRADE
	FROM EMP E, SALGRADE S
	WHERE E.SAL BETWEEN S.LOSAL AND S.HISAL;

SELF JOIN: IF A TABLE JOINED TO ITSELF, THEN ITS CALLED SELF JOIN

	SELECT E.ENAME, M.ENAME
	FROM EMP E, EMP M
	WHERE E.MGR=M.EMPNO;

OUTER JOINS: USED TO GET ALL ROWS(NON MACHING) FROM ONE TABLE AND MACHING ROWS FROM SECOND TABLE. THERE ARE TWO TYPES OF OYTER JOINS
	1. LEFT OUTER JOIN
	2. RIGHT OUTER JOIN

LEFT OUTER JOINS: GETS ALL ROWS FROM LEFT(FIRST) TABLE AND ONLY MACHING ROWS FROM RIGHT(SECOND) TBL.
	SYN: SELECT column_list
	     FROM TABLE1, TABLE2
             WHERE T1.COLUMN=T2.COLUMN(+);

	SELECT E.ENAME, M.ENAME
	FROM EMP E, EMP M
	WHERE E.MGR=M.EMPNO(+);


RIGHT OUTER JOINS: GETS ALL ROWS FROM LEFT(FIRST) TABLE AND ONLY MACHING ROWS FROM RIGHT(SECOND) TBL.

	SYN: SELECT column_list
	     FROM TABLE1, TABLE2
             WHERE T1.COLUMN(+)=T2.COLUMN;


	SELECT *
	FROM EMP E, DEPT D
	WHERE E.DEPTNO(+)=D.DEPTNO;
====================================================================================================
ANSI JOINS (SQL:1999 JOINS):
````````````````````````````
TYPES:
	1. 'ON' clause JOINS
	2. NATURAL JOINS
	3. 'USING' clause JOINS
	4. CROSS JOIN
	5. OUTER JOIN (LEFT, RIGHT, FULL)

'ON' clause:
`````````````
SELECT *
FROM EMP JOIN DEPT
ON EMP.DEPTNO=DEPT.DEPTNO;

SELECT E.ENAME,E.JOB,E.SAL,S.*
FROM EMP E JOIN SALGRADE S
ON E.SAL BETWEEN S.LOSAL AND S.HISAL;

SELECT E.ENAME, M.ENAME MANAGER
FROM EMP E JOIN EMP M
ON E.MGR=M.EMPNO;

NATURAL JOIN: JOINS TWO TABLES BASED ON ALL COMMON COLUMNS IN BOTH TABLES

SELECT *
FROM EMP NATURAL JOIN DEPT;

'USING' clause: JOINS TWO TABLES BASED ON SPECIFIED COMMON COLUMN(S) IN BOTH TABLES

SELECT *
FROM EMP JOIN DEPT
USING (DEPTNO);

CROSS JOIN: IT RESULTS IN CARTESIAN PRODUCT
	SELECT *
	FROM EMP CROSS JOIN DEPT;

OUTER JOINS:
````````````
SELECT E.ENAME, M.ENAME MANAGER
FROM EMP E LEFT OUTER JOIN EMP M
ON E.MGR=M.EMPNO;

SELECT E.ENAME, M.ENAME MANAGER
FROM EMP E RIGHT OUTER JOIN EMP M
ON E.MGR=M.EMPNO;

SELECT E.ENAME, M.ENAME MANAGER
FROM EMP E FULL OUTER JOIN EMP M
ON E.MGR=M.EMPNO;

-----------------------------------------------------------------------------------------------------

TO SEE LIST OF TABLES CREATED:
	SELECT * FROM TAB;
	(OR)
	SELECT * FROM CAT;
	(OR)
	SELECT TABLE_NAME FROM USER_TABLES;

--------------------------------------------------end-------------------------------------------------





hey..myaan
this is a new versioning of the old one






















































